The following is a digest of the repository "my-portfolio".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: my-portfolio
Files Analyzed: 38
Total Text Size: 71.97 KB
Estimated Tokens (text only): ~20,389

--- DIRECTORY STRUCTURE ---
my-portfolio/
├── src/
│   ├── app/
│   │   ├── assets/
│   │   │   ├── background.svg
│   │   │   └── photo.png [binary]
│   │   ├── fonts/
│   │   │   ├── Cairo-VariableFont_slnt,wght.ttf [binary]
│   │   │   └── Poppins-Black.ttf [binary]
│   │   ├── test/
│   │   │   └── page.tsx
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   ├── not-found.tsx
│   │   └── page.tsx
│   └── components/
│       ├── About/
│       │   └── About.tsx
│       ├── Header/
│       │   └── MainHeadr.tsx
│       ├── Hello/
│       │   └── Hello.tsx
│       ├── Hero/
│       │   └── Hero.tsx
│       ├── LinkdenBanner/
│       │   └── LinkdenBanner.tsx
│       ├── TechStack/
│       │   └── TechStack.tsx
│       └── ui/
│           ├── animated-gradient-text.tsx
│           ├── AnimatedTabs.tsx
│           ├── Global.tsx
│           ├── LenisProvider.tsx
│           ├── MagicText.tsx
│           ├── meteors.tsx
│           ├── NoiseBackground.tsx
│           ├── particles.tsx
│           ├── ScrollProgress .tsx
│           ├── SectionTitle.tsx
│           ├── skills.tsx
│           ├── sparkles-text.tsx
│           ├── Spotlight.tsx
│           ├── startText.tsx
│           └── VelocityScroll.tsx
├── components.json
├── eslint.config.mjs
├── next.config.ts [binary]
├── package.json
├── postcss.config.mjs
├── readme.md
├── tailwind.config.ts [binary]
└── tsconfig.json


--- FILE CONTENTS ---
============================================================
FILE: src/app/assets/background.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%">
  <filter id="noiseFilter">
    <feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="4" stitchTiles="stitch" />
  </filter>
  <rect width="100%" height="100%" filter="url(#noiseFilter)" opacity="0.05" />
</svg>


============================================================
FILE: src/app/test/page.tsx
============================================================
export default function test (){
    return <h1> Hello Test </h1>
}

============================================================
FILE: src/app/globals.css
============================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --bg-color: #ffffff;     
  --text-color: #000000;    
  --gradient-from: #fffcfc; 
  --gradient-to: #d6d6d6;    
  --secondary-text-color: rgb(182, 179, 250);
  --three-text-color: rgb(152, 149, 212);
  --radius : 5px
}

.dark {
  --bg-color: #0e0e18;      /* لون الخلفية للوضع الداكن */
  --text-color: #ffffff;     /* لون النص للوضع الداكن */
  --gradient-from: #08080f;  /* بداية التدرج للوضع الداكن */
  --gradient-to: #1b222c;    /* نهاية التدرج (مثلاً gray-800) */
  --secondary-text-color: rgb(182, 179, 250);
  --three-text-color: rgb(152, 149, 212);
}
.container{
  max-width: 1160px;
}
:lang(ar) {
  font-family: var(--font-cairo), sans-serif;
}
html {
  scroll-behavior: smooth;
}
body {

  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100%25' height='100%25'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.05'/%3E%3C/svg%3E");
  background-color: var(--bg-color);
  color: var(--text-color);
  font-family: var(--font-poppins), sans-serif;
  -webkit-overflow-scrolling: touch;
}
.dark body{
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100%25' height='100%25'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.8' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.05'/%3E%3C/svg%3E");
}

::-webkit-scrollbar {
  width: 8px;
  background-color: var(--bg-color);
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: var(--secondary-text-color);
  border-radius: 4px;
  transition: background 0.3s ease;
}

@keyframes move-bg {
  0% {
    background-position: 0% 50%;
  }
  100% {
    background-position: 100% 50%;
  }
}

============================================================
FILE: src/app/layout.tsx
============================================================
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import localFont from "next/font/local";
import { ThemeProvider } from "next-themes"; 
import type { Viewport } from 'next';
import NoiseBackground from "@/components/ui/NoiseBackground";
import LenisProvider from "@/components/ui/LenisProvider";
const poppins = localFont({
  src: "./fonts/Poppins-Black.ttf",
  variable: "--font-geist-sans",
  weight: "100 200 300 400 500 600 700 800 900",
});
const cairo = localFont({
  src: "./fonts/Cairo-VariableFont_slnt,wght.ttf",
  variable: "--font-geist-mono",
  weight: "100 200 300 400 500 600 700 800 900",
});
export const viewport: Viewport = {
  themeColor: "#6366f1",
};
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Fullstack Portofolio",
  description: "Front End Developer Portfolio",
  keywords: "Front End Developer, Portfolio, Web Development",
  openGraph: {
    title: "Portfolio App",
    description: "FullStack Developer Portfolio",
    site_name: "Mohamed Fekry Portfolio",
    themeColor: "#6366f1",
    type: "website",
    url: "https://bytefolio.vercel.app",
    images: [
      {
        url: "https://res.cloudinary.com/difez8gdw/image/upload/v1750365847/New_Bitmap_image_-_Copy_ldc8br.png",
        width: 800,
        height: 600,
        alt: "Portfolio Preview Image",
      },
    ],
  },
  twitter: {
    card: "summary_large_image",
    title: "Portfolio App",
    description: "FullStack Developer Portfolio",
    images: [
      "https://res.cloudinary.com/difez8gdw/image/upload/v1750365847/New_Bitmap_image_-_Copy_ldc8br.png",
    ],
  },
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="icon" href="/photo.png" type="image/png" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${poppins.variable} ${cairo.variable} antialiased`}
        suppressHydrationWarning
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          enableSystem={false}
          disableTransitionOnChange
          storageKey="portfolio-theme"
        >
          <NoiseBackground />
          <LenisProvider>
            {children}
          </LenisProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}


============================================================
FILE: src/app/not-found.tsx
============================================================
"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";

export default function NotFound() {
  const router = useRouter();

  useEffect(() => {
    const timer = setTimeout(() => {
      router.push("/");
    }, 3000);
    return () => clearTimeout(timer);
  }, [router]);

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-[var(--bg-color)] text-[var(--text-color)] px-6 relative overflow-hidden">
      <div className="absolute w-[40vw] h-[40vw] max-w-96 max-h-96 bg-red-500 rounded-full blur-3xl opacity-30 top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%] md:w-80 md:h-80 animate-pulse pointer-events-none"></div>

      <div className="relative z-10 text-center">
        <h1 className="sm:text-7xl text-9xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-red-500 to-orange-500 drop-shadow-lg">
          404
        </h1>
        <p className="text-xl sm:text-lg font-semibold mt-4">
          Oops! The page you are looking for does not exist.
        </p>
        <p className="text-sm sm:text-xs mt-2 text-gray-400">
          Redirecting you to the home page in 3 seconds...
        </p>

        <button
          onClick={() => router.push("/")}
          className="mt-6 px-6 py-3 text-lg sm:text-base font-medium rounded-full bg-gradient-to-r from-red-500 to-orange-500 text-white hover:scale-110 transition-all duration-300 shadow-md"
        >
          Back Home
        </button>
      </div>
    </div>
  );
}


============================================================
FILE: src/app/page.tsx
============================================================
"use client";

import About from "@/components/About/About";
import MainHeadr from "@/components/Header/MainHeadr";
import Hello from "@/components/Hello/Hello";
import Hero from "@/components/Hero/Hero";
import TechStack from "@/components/TechStack/TechStack";
import { useState, useEffect } from "react";

export default function Home() {
  const [showIntro, setShowIntro] = useState(true);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const handleIntroEnd = () => {
    setShowIntro(false);
  };

  // Don't render anything until mounted to prevent hydration mismatch
  if (!isMounted) {
    return null;
  }

  return (
    <>
      {showIntro ? (
        <>
          <Hello onEnd={handleIntroEnd} />
        </>
      ) : (
        <>
          <MainHeadr />
          <Hero />
          <About />
          <TechStack />
        </>
      )}
    </>
  );
}


============================================================
FILE: src/components/About/About.tsx
============================================================
"use client";
import React from "react";
import MagicText from "../ui/MagicText";
import { motion } from "framer-motion";
import { ScrollTunnel } from "../ui/startText";
import { SectionTitle } from "../ui/SectionTitle";
import HorizontalScrollCarouselSkills from "../ui/skills";

const paragraph =
  "I'm a Full-Stack Developer who enjoys building fast, reliable web apps using React Next.js, and NodeJs and NestJs. I care about writing clean code, staying up-to-date with tech, and creating smooth user experiences.";
const endparagraph = "Every line of code brings an idea to life";

function About() {

  return (
    <>

      <ScrollTunnel word="ABOUT ME"  /> 
      <HorizontalScrollCarouselSkills />
      {/* About Content Section */}
        <section className="relative z-20 min-h-screen flex items-center justify-center bg-[var(-bg--color)]">
          <div className="container mx-auto px-4">
            <div className="max-w-4xl mx-auto text-center">
              <SectionTitle badge="About" title="About Me" />
              <motion.div
                initial={{ opacity: 0, y: 50 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
                className="mt-8"
              >
                <p className="text-lg md:text-xl text-gray-700 dark:text-gray-800 leading-relaxed mb-8">
                  {paragraph}
                </p>
                <div className="text-2xl md:text-3xl font-bold text-gray-700 dark:text-gray-800">
                  <MagicText value={endparagraph} />
                </div>
                {/* Skills Section */}
              </motion.div>
            </div>
          </div>
        </section> 
    </>
  );
}

export default About;


============================================================
FILE: src/components/Header/MainHeadr.tsx
============================================================
"use client";
import { useState, useEffect } from "react";
import { useTheme } from "next-themes";
import {
  faHouse,
  faMagnifyingGlass,
  faBell,
  faEnvelope,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { Drawer } from "vaul";
import Image from "next/image";
import avatar from "@/app/assets/photo.png";
import { AnimatedTabs } from "../ui/AnimatedTabs";
import LinkdenBanner from "../LinkdenBanner/LinkdenBanner";
import { ScrollProgress } from "../ui/ScrollProgress ";

function MainHeader() {
  const [isBlurred, setIsBlurred] = useState(false);
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    const handleScroll = () => {
      setIsBlurred(window.scrollY > 2);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  if (!mounted) return null;

  return (
    <>
      <LinkdenBanner />
      <div className="sticky top-2 w-full z-[99999]">
        <div className={`container mx-auto`}>
          <div className={`flex justify-between items-center p-2 px-4 my-2 rounded-[100px] transition-all duration-300 overflow-hidden relative ${
            isBlurred 
              ? "liquidGlass-wrapper shadow-[0_6px_6px_rgba(0,0,0,0.2),0_0_20px_rgba(0,0,0,0.1)]" 
              : ""
          }`}>
            {isBlurred && (
              <>
                <div className="liquidGlass-effect absolute inset-0 z-0 backdrop-blur-[3px] overflow-hidden isolation-isolate rounded-[100px]" style={{ filter: 'url(#glass-distortion)' }}></div>
                <div className="liquidGlass-tint absolute inset-0 z-[1] bg-[rgba(255,255,255,0.25)] rounded-[100px]"></div>
                <div className="liquidGlass-shine absolute inset-0 z-[2] overflow-hidden rounded-[100px] shadow-[inset_2px_2px_1px_0_rgba(255,255,255,0.5),inset_-1px_-1px_1px_1px_rgba(255,255,255,0.5)]"></div>
                <div className="absolute inset-0 z-[1] bg-[#2f2f382a] backdrop-blur-[2px] rounded-[100px]"></div>
              </>
            )}
            <div className="flex text-white items-center justify-between w-full relative z-[3] liquidGlass-text">
              <figure className="flex items-center gap-3">
                <Image
                  src={avatar}
                  alt="User profile picture of Mohamed, FullStack Developer"
                  title="User Profile"
                  className="w-10 h-10 rounded-full border-2 border-[#7777ef]"
                  priority
                />
                <figcaption>
                  <h1 className="text-sm font-semibold text-gray-600 dark:text-gray-50">
                    Mohamed Fekry
                  </h1>
                  <p className="text-gray-700 dark:text-gray-400 ">
                    FullStack Developer
                  </p>
                </figcaption>
              </figure>
              <div className="flex items-center uppercase">
                <div className="hidden sm:flex">
                  <AnimatedTabs
                    tabs={[
                      { label: "Home", link: "#home" },
                      { label: "About", link: "#about" },
                      { label: "Portfolio", link: "/#" },
                    ]}
                  />
                </div>

                <div className="hidden md:block h-1 w-1 rounded-full bg-gray-700 dark:bg-white mx-2 "></div>

                <button
                  onClick={() => {
                    setTheme(theme === "dark" ? "light" : "dark");
                  }}
                  className="h-10 w-10 p-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full"
                >
                  <svg
                    className="fill-violet-700 block dark:hidden"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
                  </svg>
                  <svg
                    className="fill-yellow-500 hidden dark:block"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
                      fillRule="evenodd"
                      clipRule="evenodd"
                    ></path>
                  </svg>
                </button>
              </div>
            </div>
            <ScrollProgress className="absolute top-[97%] left-0 right-0 h-1 z-[4]" />
            <Drawer.Root modal={false}>
              <Drawer.Trigger className="sm:hidden flex items-center justify-center w-10 h-10 rounded-full bg-[#3c3c494d] backdrop-blur-md text-white relative z-[10]">
                <span className="text-xl">☰</span>
              </Drawer.Trigger>
              <Drawer.Portal>
                <Drawer.Overlay className="fixed inset-0 bg-black/40 sm:hidden" />
                <Drawer.Content className="backdrop-blur-lg bg-[#16161ee0] z-[999999] shadow-lg flex flex-col rounded-t-[30px] mt-24 h-fit fixed bottom-0 left-0 right-0 sm:hidden">
                  <div className="p-4">
                    <div className="mx-auto w-12 h-1.5 rounded-full bg-[#282832] mb-8" />
                    {[
                      { icon: faHouse, label: "Home" },
                      { icon: faMagnifyingGlass, label: "Explore" },
                      { icon: faBell, label: "Notifications" },
                      { icon: faEnvelope, label: "Messages" },
                    ].map((item, index) => (
                      <a href="#" key={index}>
                        <div className="p-3 text-[#a0a0aa] hover:bg-[#282832] hover:text-white flex items-center gap-3 transition-colors duration-200 rounded-lg">
                          <FontAwesomeIcon
                            className="text-lg"
                            icon={item.icon}
                          />
                          <span className="text-base font-medium">
                            {item.label}
                          </span>
                        </div>
                      </a>
                    ))}
                  </div>
                </Drawer.Content>
              </Drawer.Portal>
            </Drawer.Root>
          </div>
        </div>

        {/* SVG Filter for Glass Distortion */}
        <svg style={{ display: 'none' }}>
          <filter
            id="glass-distortion"
            x="0%"
            y="0%"
            width="100%"
            height="100%"
            filterUnits="objectBoundingBox"
          >
            <feTurbulence
              type="fractalNoise"
              baseFrequency="0.01 0.01"
              numOctaves="1"
              seed="5"
              result="turbulence"
            />
            <feComponentTransfer in="turbulence" result="mapped">
              <feFuncR type="gamma" amplitude="1" exponent="10" offset="0.5" />
              <feFuncG type="gamma" amplitude="0" exponent="1" offset="0" />
              <feFuncB type="gamma" amplitude="0" exponent="1" offset="0.5" />
            </feComponentTransfer>
            <feGaussianBlur in="turbulence" stdDeviation="1" result="softMap" />
            <feSpecularLighting
              in="softMap"
              surfaceScale="2"
              specularConstant="0.6"
              specularExponent="30"
              lightingColor="white"
              result="specLight"
            >
              <fePointLight x="-200" y="-200" z="300" />
            </feSpecularLighting>
            <feComposite
              in="specLight"
              operator="arithmetic"
              k1="0"
              k2="1"
              k3="1"
              k4="0"
              result="litImage"
            />
            <feDisplacementMap
              in="SourceGraphic"
              in2="softMap"
              scale="40"
              xChannelSelector="R"
              yChannelSelector="G"
            />
          </filter>
        </svg>
      </div>
    </>
  );
}

export default MainHeader;


============================================================
FILE: src/components/Hello/Hello.tsx
============================================================
'use client';

import React, { useState, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from 'framer-motion';

const greetings = [
  { text: 'مرحبا', language: 'Arabic' },
  { text: 'Hello', language: 'English' },
  { text: 'नमस्ते', language: 'Hindi' },
  { text: 'Ciao', language: 'Italian' },
  { text: '你好', language: 'Chinese' },
  { text: 'Bonjour', language: 'French' },
  { text: 'Hola', language: 'Spanish' },
  { text: '안녕하세요', language: 'Korean' },
  { text: 'Hallo', language: 'German' },
];

type HelloProps = {
  onEnd?: () => void;
};

const Hello: React.FC<HelloProps> = ({ onEnd }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  // Handle client-side mounting to prevent hydration mismatch
  useEffect(() => {
    setIsMounted(true);
  }, []);

  const handleEnd = useCallback(() => {
    if (onEnd) onEnd();
  }, [onEnd]);

  useEffect(() => {
    if (!isMounted) return;
    
    if (currentIndex < greetings.length) {
      const timer = setTimeout(() => {
        setCurrentIndex(currentIndex + 1);
      }, getDuration(currentIndex));

      return () => clearTimeout(timer);
    } else {
      setIsComplete(true);
      setTimeout(() => {
        handleEnd();
      }, 1510);
    }
  }, [currentIndex, handleEnd, isMounted]);

  const getDuration = (index: number): number => {
    if (index < greetings.length - 1 && index !== 0) {
      return 200;
    } else {
      return 1000;
    }
  };

  // Don't render anything until mounted to prevent hydration mismatch
  if (!isMounted) {
    return null;
  }

  return (
    <AnimatePresence>
      {!isComplete && (
        <motion.div
          className="fixed inset-0 bg-gradient-to-b from-[var(--gradient-from)] to-[var(--gradient-to)] z-[9999999999999]"      
          initial={{ y: 0, borderBottomLeftRadius: 0, borderBottomRightRadius: 0 }}
          exit={{
            y: [0, '-25%', '-100%'],
            scaleY: [1, 0.8, 0],
            borderRadius: ["0%", "25%", "50%"],
            transformOrigin: "center",
            transition: {
              duration: 1.5,
              ease: 'easeInOut',
              times: [0, 0.5, 1], 
            }
          }}
          transition={{ duration: 1, ease: 'easeInOut' }}
        >
          <div className="flex h-screen items-center justify-center ">
            <motion.div
              key={currentIndex}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
              className="text-6xl"
              style={{
                fontFamily: greetings[currentIndex]?.language === "Arabic" ? "Cairo, sans-serif" : undefined,
              }}
            >
              {greetings[currentIndex]?.text || ''}
            </motion.div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default Hello;

============================================================
FILE: src/components/Hero/Hero.tsx
============================================================
"use client";
import React, { useState, useEffect } from "react";
import { Spotlight } from "@/components/ui/Spotlight";
import { Globe } from "../ui/Global";
import { Particles } from "../ui/particles";
import { useTheme } from "next-themes";
import { motion } from "framer-motion";

function Hero() {
  const { theme } = useTheme();
  const [isScrolling, setIsScrolling] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    if (!isMounted) return;
    
    const handleScroll = () => {
      const scrollPosition = window.scrollY;
      if (scrollPosition === 0) {
        setIsScrolling(false);
      } else if (!isScrolling) {
        setIsScrolling(true);
      }
    };

    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [isScrolling, isMounted]);

  // Don't render anything until mounted to prevent hydration mismatch
  if (!isMounted) {
    return (
      <div className="relative max-w-[85rem] mx-auto h-[calc(100vh_-_76px)] flex items-center justify-center uppercase">
        <div className="w-full max-w-[600px] aspect-square z-10" />
      </div>
    );
  }

  return (
    <>
      <Spotlight />
      <Particles
        className="absolute inset-0"
        quantity={100}
        ease={40}
        color={theme === "dark" ? "#ffffff" : "#000000"}
        refresh
      />
      <div className="relative max-w-[85rem]  mx-auto h-[calc(100vh_-_76px)] flex items-center justify-center uppercase">
        <motion.div
          className="w-full max-w-[600px] aspect-square z-10"
          initial={{ opacity: 0, y: 100 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1.5, ease: "easeOut" }}
        >
          <Globe />
        </motion.div>

        <motion.div
          className="absolute left-0 right-0 px-4 top-[calc(50%-270px)] sm:top-[calc(49%-300px)] "
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, ease: "easeOut", delay: 0.7 }}
        >
          <h1
            className="text-4xl md:text-5xl lg:text-[4rem] xl:text-[4.5rem] font-extrabold text-center text-transparent bg-clip-text bg-gradient-to-b from-gray-400 to-gray-200 pb-8"
          >
            Designing the Future of Web
          </h1>
        </motion.div>

        <motion.div
          className="absolute left-0 right-0 px-4 top-[calc(50% - 100px)] z-[999]"
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 1, ease: "easeOut", delay: 1.2 }}
        >
          <h1
            className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl xl:text-7xl font-extrabold text-center text-transparent bg-clip-text bg-gradient-to-b from-gray-300 to-gray-500"
          >
            One Pixel at a Time
          </h1>
        </motion.div>
      </div>

      <motion.div
        className="fixed bottom-8 left-1/2 transform -translate-x-1/2 z-40"
        initial={{ opacity: 1 }}
        animate={{ opacity: isScrolling ? 0 : 1 }}
        transition={{ duration: 0.3 }}
      >
        <div className="flex flex-col items-center text-black/60 dark:text-white/60">
          <span className="text-sm mb-2">Scroll to explore</span>
          <motion.div
            className="w-6 h-10 border-2 border-black/30 dark:border-white/30 rounded-full flex justify-center"
            animate={{ opacity: [1, 0.3, 1] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            <motion.div
              className="w-1 h-2 bg-black/60 dark:bg-white/60 rounded-full mt-2"
              animate={{ y: [0, 12, 0] }}
              transition={{ duration: 2, repeat: Infinity }}
            />
          </motion.div>
        </div>
      </motion.div>
    </>
  );
}

export default Hero;

============================================================
FILE: src/components/LinkdenBanner/LinkdenBanner.tsx
============================================================
"use client";
import React, { useState } from "react";
import { motion } from "framer-motion";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faLinkedin } from "@fortawesome/free-brands-svg-icons";
import { faX } from "@fortawesome/free-solid-svg-icons";
import { ChevronRight } from "lucide-react";
import AnimatedGradientText from "../ui/animated-gradient-text";
import { cn } from "@/lib/utils";

export default function LinkdenBanner() {
  const [showBanner, setShowBanner] = useState(true);

  return (
    <>
      {showBanner && (
        <motion.div
          className="bg-gradient-to-r  z-[99999] from-[#ec4899] via-[#a855f7] to-[#6366f1] py-1 flex items-center justify-center shadow-lg relative animate-move-bg bg-[length:200%_200%]"
          initial={{ opacity: 1 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
                    <a  target="_blank" href="https://www.linkedin.com/in/mohamedfekryy">
          <AnimatedGradientText>
            <FontAwesomeIcon
              icon={faLinkedin}
              style={{ color: "#0077b5" }}
              className="text-lg mx-1"
            />
            <hr className="mx-2 shrink-0 bg-gray-300" />
            <span
              className={cn(
                "inline animate-gradient bg-gradient-to-r from-[#ffaa40] via-[#9c40ff] to-[#ffaa40] bg-[length:var(--bg-size)_100%] bg-clip-text text-transparent"
              )}
            >
              <span className="hidden sm:block">Connect on linkedin </span>
              <span className="block sm:hidden">linkedin </span>
            </span>
            <ChevronRight className="ml-1 size-3 transition-transform duration-300 ease-in-out group-hover:translate-x-0.5 text-white" />
          </AnimatedGradientText>
          </a>

          <div
            onClick={() => setShowBanner(false)}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 p-[0.85rem] flex items-center justify-center rounded-full cursor-pointer hover:bg-indigo-400"
          >
            <FontAwesomeIcon icon={faX} />
          </div>
        </motion.div>
      )}
    </>
  );
}


============================================================
FILE: src/components/TechStack/TechStack.tsx
============================================================
"use client";
import React from "react";
function TechStack() {
  return (
    <section id="about" className="container mx-auto text-center mt-28 mb-3">
      <div>
        <h3 className="text-4xl font-bold text-center text-transparent bg-clip-text origin-left bg-gradient-to-r from-[var(--secondary-text-color)] via--[var(--three-text-color)] to-[var(--three-text-color)]   dark:to-[var(--text-color)] leading-none">
          My Skills
        </h3>
        <p className="text-[1.22rem] max-w-[63%] m-auto text--(var(--text-color))">
          i put your ideas and thus your wishes in the from of a unique web
          project that inspires you and your customers
        </p>
      </div>
      <div className="flex flex-row flex-wrap">
        <div className="w-1/6">
          <div className="m-2 bg-slate-800 rounded-md">asd</div>
        </div>
        <div className="w-1/6">
          <div className="m-2 bg-slate-800 rounded-md">asd</div>
        </div>
        <div className="w-1/6">
          <div className="m-2 bg-slate-800 rounded-md">asd</div>
        </div>
        <div className="w-1/6">
          <div className="m-2 bg-slate-800 rounded-md">asd</div>
        </div>
        <div className="w-1/6">
          <div className="m-2 bg-slate-800 rounded-md">asd</div>
        </div>

        <div className="w-1/6">
          <div className="m-2 bg-slate-800 rounded-md">asd</div>
        </div>
      </div>
    </section>
  );
}

export default TechStack;


============================================================
FILE: src/components/ui/animated-gradient-text.tsx
============================================================
import { ReactNode } from "react";

import { cn } from "@/lib/utils";

export default function AnimatedGradientText({
  children,
  className,
}: {
  children: ReactNode;
  className?: string;
}) {
  return (
    <div
      className={cn(
        "group relative mx-auto flex max-w-fit flex-row items-center justify-center rounded-2xl bg-white/40 px-4 py-1.5 text-sm font-medium shadow-[inset_0_-8px_10px_#8fdfff1f] backdrop-blur-sm transition-shadow duration-500 ease-out [--bg-size:300%] hover:shadow-[inset_0_-5px_10px_#8fdfff3f] dark:bg-black/40",
        className,
      )}
    >
      <div
        className={`absolute inset-0 block h-full w-full animate-gradient bg-gradient-to-r from-[#ffaa40]/50 via-[#9c40ff]/50 to-[#ffaa40]/50 bg-[length:var(--bg-size)_100%] p-[1px] ![mask-composite:subtract] [border-radius:inherit] [mask:linear-gradient(#fff_0_0)_content-box,linear-gradient(#fff_0_0)] animate-move-bg`}
      />

      {children}
    </div>
  );
}


============================================================
FILE: src/components/ui/AnimatedTabs.tsx
============================================================
"use client";

import { useEffect, useRef, useState } from "react";

export function AnimatedTabs({
  tabs,
}: {
  tabs: { label: string; link: string }[];
}) {
  const [activeTab, setActiveTab] = useState(tabs[0].label);
  const containerRef = useRef<HTMLDivElement>(null);
  const activeTabRef = useRef<HTMLAnchorElement>(null);

  useEffect(() => {
    const container = containerRef.current;

    if (container && activeTab) {
      const activeTabElement = activeTabRef.current;

      if (activeTabElement) {
        const { offsetLeft, offsetWidth } = activeTabElement;

        const clipLeft = offsetLeft;
        const clipRight = offsetLeft + offsetWidth;

        container.style.clipPath = `inset(0 ${Number(
          100 - (clipRight / container.offsetWidth) * 100
        ).toFixed()}% 0 ${Number(
          (clipLeft / container.offsetWidth) * 100
        ).toFixed()}% round 8px)`;
      }
    }
  }, [activeTab, activeTabRef, containerRef]);

  return (
    <div className="relative mx-auto flex w-fit flex-col items-center rounded-full bg-secondary/50 ">
      <div
        ref={containerRef}
        className="absolute z-10 w-full overflow-hidden [clip-path:inset(0px_75%_0px_0%_round_17px)] [transition:clip-path_0.25s_ease]"
      >
        <div className="relative flex w-full justify-center bg-gradient-to-r from-[#6a65f2] via-[#b553e6] to-[#9894ff] bg-[length:200%_100%] animate-move-bg">
          {tabs.map((tab, index) => (
            <a
              href={tab.link}
              key={index}
              onClick={() => setActiveTab(tab.label)}
              className="flex h-8 items-center rounded-full p-3 text-sm font-medium text-primary-foreground"
            >
              {tab.label}
            </a>
          ))}
        </div>
      </div>
      <div className="relative flex w-full justify-center">
        {tabs.map(({ label, link }, index) => {
          const isActive = activeTab === label;

          return (
            <a
              key={index}
              href={link}
              ref={isActive ? activeTabRef : null}
              onClick={() => setActiveTab(label)}
              className="flex h-8 items-center rounded-full p-3 text-sm font-medium text-gray-800 dark:text-gray-50"
            >
              {label}
            </a>
          );
        })}
      </div>
    </div>
  );
}


============================================================
FILE: src/components/ui/Global.tsx
============================================================
import createGlobe, { COBEOptions } from "cobe";
import { useCallback, useEffect, useRef, useState } from "react";
import { useMotionValue } from "framer-motion";

const GLOBE_CONFIG: COBEOptions = {
  width: 400,
  height: 400,
  onRender: () => {},
  devicePixelRatio: 1,
  phi: 0,
  theta: 0.3,
  dark: 0,
  diffuse: 0.2,
  mapSamples: 16000,
  mapBrightness: 1,
  baseColor: [0.95, 0.95, 0.95],
  markerColor: [251 / 255, 100 / 255, 21 / 255],
  glowColor: [1, 1, 2],
  markers: [
    {
      location: [26.8206, 28.99],
      size: 0.1,
    },
  ],
};

export const Globe = ({
  className,
  config = GLOBE_CONFIG,
}: {
  className?: string;
  config?: COBEOptions;
}) => {
  const phiRef = useRef(0);
  const widthRef = useRef(0);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const pointerInteracting = useRef<number | null>(null);
  const pointerInteractionMovement = useRef(0);
  const r = useMotionValue(0);
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const updatePointerInteraction = (value: number | null) => {
    pointerInteracting.current = value;
    if (canvasRef.current) {
      canvasRef.current.style.cursor = value ? "grabbing" : "grab";
    }
  };

  const updateMovement = (clientX: number) => {
    if (pointerInteracting.current !== null) {
      const delta = clientX - pointerInteracting.current;
      pointerInteractionMovement.current = delta;
      r.set(delta / 200);
    }
  };

  const onRender = useCallback(
    (state: Record<string, unknown>) => {
      if (!pointerInteracting.current) phiRef.current -= 0.002;
      state.phi = phiRef.current + r.get();
      state.width = widthRef.current;
      state.height = widthRef.current;
    },
    [r]
  );
  

  const onResize = () => {
    if (canvasRef.current) {
      widthRef.current = canvasRef.current.offsetWidth;
    }
  };

  useEffect(() => {
    if (!isMounted) return;
    
    window.addEventListener("resize", onResize);
    onResize();

    const globe = createGlobe(canvasRef.current!, {
      ...config,
      width: widthRef.current,
      height: widthRef.current,
      onRender,
    });

    setTimeout(() => {
      if (canvasRef.current) {
        canvasRef.current.style.opacity = "1";
      }
    });

    return () => {
      window.removeEventListener("resize", onResize);
      globe.destroy();
    };
  }, [config, onRender, isMounted]);

  // Don't render anything until mounted to prevent hydration mismatch
  if (!isMounted) {
    return (
      <div className={`aspect-[1/1] w-full max-w-[600px] ${className}`}>
        <canvas className="h-full w-full opacity-0 flex justify-center items-center" />
      </div>
    );
  }

  return (
    <div className={`aspect-[1/1] w-full max-w-[600px] ${className}`}>
      <canvas
        className="h-full w-full opacity-0 flex justify-center items-center"
        ref={canvasRef}
        onPointerDown={(e) =>
          updatePointerInteraction(
            e.clientX - pointerInteractionMovement.current
          )
        }
        onPointerUp={() => updatePointerInteraction(null)}
        onPointerOut={() => updatePointerInteraction(null)}
        onMouseMove={(e) => updateMovement(e.clientX)}
        onTouchMove={(e) =>
          e.touches[0] && updateMovement(e.touches[0].clientX)
        }
      />
    </div>
  );
  
};


============================================================
FILE: src/components/ui/LenisProvider.tsx
============================================================
'use client';

import { ReactLenis, useLenis } from 'lenis/react';
import 'lenis/dist/lenis.css'; // Import the CSS for Lenis
import React, { useState, useEffect } from 'react';

interface LenisProviderProps {
  children: React.ReactNode;
}

const LenisProvider: React.FC<LenisProviderProps> = ({ children }) => {
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useLenis(() => {
    // console.log('Scroll event:', scroll);
  });

  // Don't render Lenis until mounted to prevent hydration mismatch
  if (!isMounted) {
    return <>{children}</>;
  }

  return (
    <ReactLenis root>
      {children}
    </ReactLenis>
  );
};

export default LenisProvider; 

============================================================
FILE: src/components/ui/MagicText.tsx
============================================================
"use client";
import React, { useRef } from "react";
import { useScroll, useTransform, motion, MotionValue } from "framer-motion";

interface MagicTextProps {
  value: string;
}

const MagicText: React.FC<MagicTextProps> = ({ value }) => {
  const element = useRef<HTMLDivElement | null>(null);
  const { scrollYProgress } = useScroll({
    target: element,
    offset: ["start 0.9", "start 0.25"],
  });

  const letters = value.split("");

  return (
    <motion.div
      className="relative leading-[1.6] overflow-hidden"
      ref={element}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
    >
      {letters.map((letter, i) => {
        const start = i / letters.length;
        const end = start + 1 / letters.length;

        return (
          <Letter key={i} range={[start, end]} progress={scrollYProgress}>
            {letter === " " ? "\u00A0" : letter}
          </Letter>
        );
      })}
    </motion.div>
  );
};

interface LetterProps {
  children: React.ReactNode;
  range: [number, number];
  progress: MotionValue<number>;
}

const Letter: React.FC<LetterProps> = ({ children, range, progress }) => {
  const opacity = useTransform(progress, range, [0, 1]);

  return (
    <span className="relative inline-block">
      <span className="absolute inset-0 opacity-30">{children}</span>

      <motion.span className="relative" style={{ opacity }}>
        {children}
      </motion.span>
    </span>
  );
};

export default MagicText;


============================================================
FILE: src/components/ui/meteors.tsx
============================================================
"use client";

import { cn } from "@/lib/utils";
import React, { useEffect, useState } from "react";

interface MeteorsProps {
  number?: number;
  minDelay?: number;
  maxDelay?: number;
  minDuration?: number;
  maxDuration?: number;
  angle?: number;
  className?: string;
}

export const Meteors = ({
  number = 20,
  minDelay = 0.2,
  maxDelay = 1.2,
  minDuration = 2,
  maxDuration = 10,
  angle = 215,
  className,
}: MeteorsProps) => {
  const [meteorStyles, setMeteorStyles] = useState<Array<React.CSSProperties>>(
    [],
  );

  useEffect(() => {
    const styles = [...new Array(number)].map(() => ({
      "--angle": -angle + "deg",
      top: "-5%",
      left: `calc(0% + ${Math.floor(Math.random() * window.innerWidth)}px)`,
      animationDelay: Math.random() * (maxDelay - minDelay) + minDelay + "s",
      animationDuration:
        Math.floor(Math.random() * (maxDuration - minDuration) + minDuration) +
        "s",
    }));
    setMeteorStyles(styles);
  }, [number, minDelay, maxDelay, minDuration, maxDuration, angle]);

  return (
    <>
      {[...meteorStyles].map((style, idx) => (
        // Meteor Head
        <span
          key={idx}
          style={{ ...style }}
          className={cn(
            "pointer-events-none absolute size-0.5 rotate-[var(--angle)] animate-meteor rounded-full bg-zinc-500 shadow-[0_0_0_1px_#ffffff10]",
            className,
          )}
        >
          {/* Meteor Tail */}
          <div className="pointer-events-none absolute top-1/2 -z-10 h-px w-[50px] -translate-y-1/2 bg-gradient-to-r from-zinc-500 to-transparent" />
        </span>
      ))}
    </>
  );
};


============================================================
FILE: src/components/ui/NoiseBackground.tsx
============================================================
// components/NoiseBackground.tsx

const NoiseBackground = () => {
    return (
      <svg
        className="fixed inset-0 w-full h-full pointer-events-none z-0"
        xmlns="http://www.w3.org/2000/svg"
      >
        <filter id="noiseFilter">
          <feTurbulence
            type="fractalNoise"
            baseFrequency="0.8"
            numOctaves="4"
            stitchTiles="stitch"
          />
        </filter>
        <rect
          width="100%"
          height="100%"
          filter="url(#noiseFilter)"
          opacity="0.05"
        />
      </svg>
    )
  }
  
  export default NoiseBackground
  

============================================================
FILE: src/components/ui/particles.tsx
============================================================
"use client";

import { cn } from "@/lib/utils";
import React, {
  ComponentPropsWithoutRef,
  useEffect,
  useRef,
  useState,
  useCallback
} from "react";

interface MousePosition {
  x: number;
  y: number;
}

function MousePosition(): MousePosition {
  const [mousePosition, setMousePosition] = useState<MousePosition>({
    x: 0,
    y: 0,
  });
  const [isMounted, setIsMounted] = useState(false);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  useEffect(() => {
    if (!isMounted) return;
    
    const handleMouseMove = (event: MouseEvent) => {
      setMousePosition({ x: event.clientX, y: event.clientY });
    };

    window.addEventListener("mousemove", handleMouseMove);

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
    };
  }, [isMounted]);

  return mousePosition;
}

interface ParticlesProps extends ComponentPropsWithoutRef<"div"> {
  className?: string;
  quantity?: number;
  staticity?: number;
  ease?: number;
  size?: number;
  refresh?: boolean;
  color?: string;
  vx?: number;
  vy?: number;
}

function hexToRgb(hex: string): number[] {
  hex = hex.replace("#", "");

  if (hex.length === 3) {
    hex = hex
      .split("")
      .map((char) => char + char)
      .join("");
  }

  const hexInt = parseInt(hex, 16);
  const red = (hexInt >> 16) & 255;
  const green = (hexInt >> 8) & 255;
  const blue = hexInt & 255;
  return [red, green, blue];
}

const remapValue = (
  value: number,
  start1: number,
  end1: number,
  start2: number,
  end2: number,
): number => {
  const remapped =
    ((value - start1) * (end2 - start2)) / (end1 - start1) + start2;
  return remapped > 0 ? remapped : 0;
};

type Circle = {
  x: number;
  y: number;
  translateX: number;
  translateY: number;
  size: number;
  alpha: number;
  targetAlpha: number;
  dx: number;
  dy: number;
  magnetism: number;
};

export const Particles: React.FC<ParticlesProps> = ({
  className = "",
  quantity = 100,
  staticity = 50,
  ease = 50,
  size = 0.4,
  refresh = false,
  color = "#ffffff",
  vx = 0,
  vy = 0,
  ...props
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const canvasContainerRef = useRef<HTMLDivElement>(null);
  const context = useRef<CanvasRenderingContext2D | null>(null);
  const circles = useRef<Circle[]>([]);
  const mousePosition = MousePosition();
  const mouse = useRef<{ x: number; y: number }>({ x: 0, y: 0 });
  const canvasSize = useRef<{ w: number; h: number }>({ w: 0, h: 0 });
  const [isMounted, setIsMounted] = useState(false);
  const dpr = typeof window !== "undefined" ? window.devicePixelRatio : 1;
  const rafID = useRef<number | null>(null);
  const resizeTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);

  useEffect(() => {
    setIsMounted(true);
  }, []);

  const rgb = React.useMemo(() => hexToRgb(color), [color]);

  const clearContext = useCallback(() => {
    if (context.current) {
      context.current.clearRect(
        0,
        0,
        canvasSize.current.w,
        canvasSize.current.h,
      );
    }
  }, [context, canvasSize]);

  const drawCircle = useCallback((circle: Circle, update = false) => {
    if (context.current) {
      const { x, y, translateX, translateY, size, alpha } = circle;
      context.current.translate(translateX, translateY);
      context.current.beginPath();
      context.current.arc(x, y, size, 0, 2 * Math.PI);
      context.current.fillStyle = `rgba(${rgb.join(", ")}, ${alpha})`;
      context.current.fill();
      context.current.setTransform(dpr, 0, 0, dpr, 0, 0);

      if (!update) {
        circles.current.push(circle);
      }
    }
  }, [context, dpr, rgb, circles]);

  const circleParams = useCallback((): Circle => {
    const x = Math.floor(Math.random() * canvasSize.current.w);
    const y = Math.floor(Math.random() * canvasSize.current.h);
    const translateX = 0;
    const translateY = 0;
    const pSize = Math.floor(Math.random() * 2) + size;
    const alpha = 0;
    const targetAlpha = parseFloat((Math.random() * 0.6 + 0.1).toFixed(1));
    const dx = (Math.random() - 0.5) * 0.1;
    const dy = (Math.random() - 0.5) * 0.1;
    const magnetism = 0.1 + Math.random() * 4;
    return {
      x,
      y,
      translateX,
      translateY,
      size: pSize,
      alpha,
      targetAlpha,
      dx,
      dy,
      magnetism,
    };
  }, [canvasSize, size]);

  const drawParticles = useCallback(() => {
    clearContext();
    const particleCount = quantity;
    for (let i = 0; i < particleCount; i++) {
      const circle = circleParams();
      drawCircle(circle);
    }
  }, [clearContext, quantity, circleParams, drawCircle]);

  const resizeCanvas = useCallback(() => {
    if (canvasContainerRef.current && canvasRef.current && context.current) {
      canvasSize.current.w = canvasContainerRef.current.offsetWidth;
      canvasSize.current.h = canvasContainerRef.current.offsetHeight;

      canvasRef.current.width = canvasSize.current.w * dpr;
      canvasRef.current.height = canvasSize.current.h * dpr;
      canvasRef.current.style.width = `${canvasSize.current.w}px`;
      canvasRef.current.style.height = `${canvasSize.current.h}px`;
      context.current.scale(dpr, dpr);

      circles.current = [];
      for (let i = 0; i < quantity; i++) {
        const circle = circleParams();
        drawCircle(circle);
      }
    }
  }, [canvasContainerRef, canvasRef, context, canvasSize, dpr, circles, quantity, circleParams, drawCircle]);

  const initCanvas = useCallback(() => {
    resizeCanvas();
    drawParticles();
  }, [resizeCanvas, drawParticles]);

  const onMouseMove = useCallback(() => {
    if (canvasRef.current) {
      const rect = canvasRef.current.getBoundingClientRect();
      const { w, h } = canvasSize.current;
      const x = mousePosition.x - rect.left - w / 2;
      const y = mousePosition.y - rect.top - h / 2;
      const inside = x < w / 2 && x > -w / 2 && y < h / 2 && y > -h / 2;
      if (inside) {
        mouse.current.x = x;
        mouse.current.y = y;
      }
    }
  }, [canvasRef, canvasSize, mousePosition, mouse]);

  const animate = useCallback(() => {
    clearContext();
    circles.current.forEach((circle: Circle, i: number) => {
      const edge = [
        circle.x + circle.translateX - circle.size,
        canvasSize.current.w - circle.x - circle.translateX - circle.size,
        circle.y + circle.translateY - circle.size,
        canvasSize.current.h - circle.y - circle.translateY - circle.size,
      ];
      const closestEdge = edge.reduce((a, b) => Math.min(a, b));
      const remapClosestEdge = parseFloat(
        remapValue(closestEdge, 0, 20, 0, 1).toFixed(2),
      );
      if (remapClosestEdge > 1) {
        circle.alpha += 0.02;
        if (circle.alpha > circle.targetAlpha) {
          circle.alpha = circle.targetAlpha;
        }
      } else {
        circle.alpha = circle.targetAlpha * remapClosestEdge;
      }
      circle.x += circle.dx + vx;
      circle.y += circle.dy + vy;
      circle.translateX +=
        (mouse.current.x / (staticity / circle.magnetism) - circle.translateX) /
        ease;
      circle.translateY +=
        (mouse.current.y / (staticity / circle.magnetism) - circle.translateY) /
        ease;

      drawCircle(circle, true);

      if (
        circle.x < -circle.size ||
        circle.x > canvasSize.current.w + circle.size ||
        circle.y < -circle.size ||
        circle.y > canvasSize.current.h + circle.size
      ) {
        circles.current.splice(i, 1);
        const newCircle = circleParams();
        drawCircle(newCircle);
      }
    });
    rafID.current = window.requestAnimationFrame(animate);
  }, [clearContext, circles, canvasSize, remapValue, vx, vy, mouse, staticity, ease, drawCircle, circleParams, rafID]);

  useEffect(() => {
    if (!isMounted) return;
    
    if (canvasRef.current) {
      context.current = canvasRef.current.getContext("2d");
    }
    initCanvas();
    animate();

    const handleResize = () => {
      if (resizeTimeout.current) {
        clearTimeout(resizeTimeout.current);
      }
      resizeTimeout.current = setTimeout(() => {
        initCanvas();
      }, 200);
    };

    window.addEventListener("resize", handleResize);

    return () => {
      if (rafID.current != null) {
        window.cancelAnimationFrame(rafID.current);
      }
      if (resizeTimeout.current) {
        clearTimeout(resizeTimeout.current);
      }
      window.removeEventListener("resize", handleResize);
    };
  }, [color, initCanvas, animate, resizeTimeout, rafID, context, isMounted]);

  useEffect(() => {
    if (!isMounted) return;
    onMouseMove();
  }, [mousePosition.x, mousePosition.y, onMouseMove, isMounted]);

  useEffect(() => {
    if (!isMounted) return;
    initCanvas();
  }, [refresh, initCanvas, isMounted]);

  // Don't render anything until mounted to prevent hydration mismatch
  if (!isMounted) {
    return (
      <div
        className={cn("pointer-events-none", className)}
        ref={canvasContainerRef}
        aria-hidden="true"
        {...props}
      >
        <canvas ref={canvasRef} className="size-full" />
      </div>
    );
  }

  return (
    <div
      className={cn("pointer-events-none", className)}
      ref={canvasContainerRef}
      aria-hidden="true"
      {...props}
    >
      <canvas ref={canvasRef} className="size-full" />
    </div>
  );
};


============================================================
FILE: src/components/ui/ScrollProgress .tsx
============================================================
"use client";

import { cn } from "@/lib/utils";
import { motion, MotionProps, useScroll } from "framer-motion";
import React from "react";
type ScrollProgressProps = Omit<React.HTMLAttributes<HTMLElement>, keyof MotionProps> & {
  className?: string;
};

export const ScrollProgress = React.forwardRef<
  HTMLDivElement,
  ScrollProgressProps
>(({ className, ...props }, ref) => {
  const { scrollYProgress } = useScroll();

  return (
    <motion.div
      ref={ref}
      className={cn(
        "fixed inset-x-0 top-0 z-50 h-px origin-left bg-gradient-to-r from-[#A97CF8] via-[#F38CB8] to-[#FDCC92]",
        className,
      )}
      style={{
        scaleX: scrollYProgress,
      }}
      {...props}
    />
  );
});

ScrollProgress.displayName = "ScrollProgress";


============================================================
FILE: src/components/ui/SectionTitle.tsx
============================================================
interface BorderedBadgeProps {
    badge: string;
    title: string;
}

export function SectionTitle({ badge, title }: BorderedBadgeProps) {
  return (
    <div className="w-fit m-auto px-3 py-[0.30rem] rounded-3xl border-2 border-[var(--secondary-text-color)] flex flex-row items-center mb-3">
      <span className="px-2 py-[0.5px] h-[18px] tracking-wide flex items-center justify-center rounded-full bg-gradient-to-r from-[var(--three-text-color)] to-[var(--secondary-text-color)] text-[9px] font-medium mr-2 text-white">
        {badge}
      </span>
      <div className="text-sm text-[var(--text-color)] font-extrabold">{title}</div>
    </div>
  );
}

============================================================
FILE: src/components/ui/skills.tsx
============================================================
import { motion, useTransform, useScroll } from "framer-motion";
import { useRef, useLayoutEffect, useState } from "react";

// عرف نوع بيانات البطاقة
interface CardType {
  url: string;
  title: string;
  id: number;
}

const HorizontalScrollCarouselSkills = () => {
  const targetRef = useRef<HTMLDivElement | null>(null);
  const sliderRef = useRef<HTMLDivElement | null>(null);
  const [maxTranslate, setMaxTranslate] = useState(0);
  const [shouldScroll, setShouldScroll] = useState(true);

  const EDGE_MARGIN = 32;
  const SECTION_MIN = 120; // vh
  const SECTION_MAX = 300; // vh

  const { scrollYProgress } = useScroll({
    target: targetRef,
  });

  useLayoutEffect(() => {
    const update = () => {
      if (!sliderRef.current || !targetRef.current) return;
      const sliderWidth = sliderRef.current.scrollWidth;
      const containerWidth = targetRef.current.offsetWidth;
      const diff = sliderWidth - containerWidth + EDGE_MARGIN * 2;
      setMaxTranslate(diff > 0 ? diff : 0);
      setShouldScroll(diff > 0);
    };
    update();
    window.addEventListener("resize", update);
    return () => window.removeEventListener("resize", update);
  }, []);

  const x = useTransform(scrollYProgress, [0, 1], shouldScroll ? [EDGE_MARGIN, -maxTranslate + EDGE_MARGIN] : [EDGE_MARGIN, EDGE_MARGIN]);

  return (
    <section
      ref={targetRef}
      className={`relative  bg-[#0e0e18] dark:bg-[var(--text-color)]`}
      style={{ height: `min(${SECTION_MAX}vh, max(${SECTION_MIN}vh, ${cards.length * 18}vh))` }}
    >
      <div className="sticky top-0 flex h-screen items-center overflow-hidden">
        <motion.div
          ref={sliderRef}
          style={{ x }}
          className="flex gap-2"
          transition={{ type: "spring", stiffness: 80, damping: 20 }}
        >
          <div style={{ minWidth: EDGE_MARGIN }} />
          {cards.map((card) => {
            return <Card card={card} key={card.id} />;
          })}
          <div style={{ minWidth: EDGE_MARGIN }} />
        </motion.div>
      </div>
    </section>
  );
};

// أضف النوع المناسب للبراميتر
const Card: React.FC<{ card: CardType }> = ({ card }) => {
  return (
    <div
      key={card.id}
      className="flex flex-col items-center justify-center h-[220px] w-[220px] bg-neutral-200 rounded-xl shadow-md mx-auto"
    >
      <img
        src={card.url}
        alt={card.title}
        className="w-24 h-24 object-contain mb-4 drop-shadow-lg mx-auto"
      />
      <div className="text-xl font-bold text-neutral-700 text-center">
        {card.title}
      </div>
    </div>
  );
};

export default HorizontalScrollCarouselSkills;

// عرف مصفوفة البطاقات بالنوع الصحيح
const cards: CardType[] = [
  // Frontend Technologies
  {
    url: "/skills/react-original.svg",
    title: "React.js",
    id: 1,
  },
  {
    url: "/skills/nextjs-original.svg",
    title: "Next.js",
    id: 2,
  },
  {
    url: "/skills/typescript-original.svg",
    title: "TypeScript",
    id: 3,
  },
  {
    url: "/skills/tailwindcss-original.svg",
    title: "Tailwind CSS",
    id: 4,
  },
  {
    url: "/skills/redux-original.svg",
    title: "Redux",
    id: 5,
  },

  // Backend Technologies
  {
    url: "/skills/nodejs-original.svg",
    title: "Node.js",
    id: 6,
  },
  {
    url: "/skills/express-original.svg",
    title: "Express.js",
    id: 7,
  },
  {
    url: "/skills/nestjs.png",
    title: "NestJS",
    id: 8,
  },
  {
    url: "/skills/mongodb-original.svg",
    title: "MongoDB",
    id: 9,
  },
  {
    url: "/skills/graphql-plain.svg",
    title: "GraphQL",
    id: 10,
  },
  {
    url: "/skills/socketio-original.svg",
    title: "Socket.io",
    id: 11,
  },

  // DevOps & Tools
  {
    url: "/skills/docker-original.svg",
    title: "Docker",
    id: 12,
  },
  {
    url: "/skills/git-original.svg",
    title: "Git",
    id: 13,
  },
  {
    url: "/skills/github-original.svg",
    title: "GitHub",
    id: 14,
  },
];

============================================================
FILE: src/components/ui/sparkles-text.tsx
============================================================
"use client";

import { motion } from "motion/react";
import { CSSProperties, ReactElement, useEffect, useState } from "react";

import { cn } from "@/lib/utils";

interface Sparkle {
  id: string;
  x: string;
  y: string;
  color: string;
  delay: number;
  scale: number;
  lifespan: number;
}

const Sparkle: React.FC<Sparkle> = ({ id, x, y, color, delay, scale }) => {
  return (
    <motion.svg
      key={id}
      className="pointer-events-none absolute z-20"
      initial={{ opacity: 0, left: x, top: y }}
      animate={{
        opacity: [0, 1, 0],
        scale: [0, scale, 0],
        rotate: [75, 120, 150],
      }}
      transition={{ duration: 0.8, repeat: Infinity, delay }}
      width="21"
      height="21"
      viewBox="0 0 21 21"
    >
      <path
        d="M9.82531 0.843845C10.0553 0.215178 10.9446 0.215178 11.1746 0.843845L11.8618 2.72026C12.4006 4.19229 12.3916 6.39157 13.5 7.5C14.6084 8.60843 16.8077 8.59935 18.2797 9.13822L20.1561 9.82534C20.7858 10.0553 20.7858 10.9447 20.1561 11.1747L18.2797 11.8618C16.8077 12.4007 14.6084 12.3916 13.5 13.5C12.3916 14.6084 12.4006 16.8077 11.8618 18.2798L11.1746 20.1562C10.9446 20.7858 10.0553 20.7858 9.82531 20.1562L9.13819 18.2798C8.59932 16.8077 8.60843 14.6084 7.5 13.5C6.39157 12.3916 4.19225 12.4007 2.72023 11.8618L0.843814 11.1747C0.215148 10.9447 0.215148 10.0553 0.843814 9.82534L2.72023 9.13822C4.19225 8.59935 6.39157 8.60843 7.5 7.5C8.60843 6.39157 8.59932 4.19229 9.13819 2.72026L9.82531 0.843845Z"
        fill={color}
      />
    </motion.svg>
  );
};

interface SparklesTextProps {
  /**
   * @default <div />
   * @type ReactElement
   * @description
   * The component to be rendered as the text
   * */
  as?: ReactElement;

  /**
   * @default ""
   * @type string
   * @description
   * The className of the text
   */
  className?: string;

  /**
   * @required
   * @type ReactNode
   * @description
   * The content to be displayed
   * */
  children: React.ReactNode;

  /**
   * @default 10
   * @type number
   * @description
   * The count of sparkles
   * */
  sparklesCount?: number;

  /**
   * @default "{first: '#9E7AFF', second: '#FE8BBB'}"
   * @type string
   * @description
   * The colors of the sparkles
   * */
  colors?: {
    first: string;
    second: string;
  };
}

export const SparklesText: React.FC<SparklesTextProps> = ({
  children,
  colors = { first: "#9E7AFF", second: "#FE8BBB" },
  className,
  sparklesCount = 10,
  ...props
}) => {
  const [sparkles, setSparkles] = useState<Sparkle[]>([]);

  useEffect(() => {
    const generateStar = (): Sparkle => {
      const starX = `${Math.random() * 100}%`;
      const starY = `${Math.random() * 100}%`;
      const color = Math.random() > 0.5 ? colors.first : colors.second;
      const delay = Math.random() * 2;
      const scale = Math.random() * 1 + 0.3;
      const lifespan = Math.random() * 10 + 5;
      const id = `${starX}-${starY}-${Date.now()}`;
      return { id, x: starX, y: starY, color, delay, scale, lifespan };
    };

    const initializeStars = () => {
      const newSparkles = Array.from({ length: sparklesCount }, generateStar);
      setSparkles(newSparkles);
    };

    const updateStars = () => {
      setSparkles((currentSparkles) =>
        currentSparkles.map((star) => {
          if (star.lifespan <= 0) {
            return generateStar();
          } else {
            return { ...star, lifespan: star.lifespan - 0.1 };
          }
        }),
      );
    };

    initializeStars();
    const interval = setInterval(updateStars, 100);

    return () => clearInterval(interval);
  }, [colors.first, colors.second, sparklesCount]);

  return (
    <span
      className={cn(className)}
      {...props}
      style={
        {
          "--sparkles-first-color": `${colors.first}`,
          "--sparkles-second-color": `${colors.second}`,
        } as CSSProperties
      }
    >
      <span className="relative inline-block">
        {sparkles.map((sparkle) => (
          <Sparkle key={sparkle.id} {...sparkle} />
        ))}
        <span>{children}</span>
      </span>
    </span>
  );
};


============================================================
FILE: src/components/ui/Spotlight.tsx
============================================================
"use client";
import React from "react";
import { motion } from "motion/react";

type SpotlightProps = {
  gradientFirst?: string;
  gradientSecond?: string;
  gradientThird?: string;
  translateY?: number;
  width?: number;
  height?: number;
  smallWidth?: number;
  duration?: number;
  xOffset?: number;
};

export const Spotlight = ({
  gradientFirst = "radial-gradient(68.54% 68.72% at 55.02% 31.46%, hsla(210, 100%, 85%, .08) 0, hsla(210, 100%, 55%, .02) 50%, hsla(210, 100%, 45%, 0) 80%)",
  gradientSecond = "radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .06) 0, hsla(210, 100%, 55%, .02) 80%, transparent 100%)",
  gradientThird = "radial-gradient(50% 50% at 50% 50%, hsla(210, 100%, 85%, .04) 0, hsla(210, 100%, 45%, .02) 80%, transparent 100%)",
  translateY = -350,
  width = 560,
  height = 1380,
  smallWidth = 240,
  duration = 7,
  xOffset = 100,
}: SpotlightProps = {}) => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 1.5 }}
      className="pointer-events-none absolute inset-0 overflow-hidden h-full w-full spotlight"
    >
      {/* المجموعة على اليسار */}
      <motion.div
        animate={{ x: [0, xOffset, 0] }}
        transition={{
          duration,
          repeat: Infinity,
          repeatType: "reverse",
          ease: "easeInOut",
        }}
        className="absolute top-0 left-0 w-full h-full z-40 pointer-events-none"
      >
        <div
          style={{
            transform: `translateY(${translateY}px) rotate(-45deg)`,
            background: gradientFirst,
            width: `${width}px`,
            height: `${height}px`,
          }}
          className="absolute top-0 left-0"
        />
        <div
          style={{
            transform: "rotate(-45deg) translate(5%, -50%)",
            background: gradientSecond,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className="absolute top-0 left-0 origin-top-left"
        />
        <div
          style={{
            transform: "rotate(-45deg) translate(-180%, -70%)",
            background: gradientThird,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className="absolute top-0 left-0 origin-top-left"
        />
      </motion.div>

      {/* المجموعة على اليمين */}
      <motion.div
        animate={{ x: [0, -xOffset, 0] }}
        transition={{
          duration,
          repeat: Infinity,
          repeatType: "reverse",
          ease: "easeInOut",
        }}
        className="absolute top-0 right-0 w-full h-full z-40 pointer-events-none"
      >
        <div
          style={{
            transform: `translateY(${translateY}px) rotate(45deg)`,
            background: gradientFirst,
            width: `${width}px`,
            height: `${height}px`,
          }}
          className="absolute top-0 right-0"
        />
        <div
          style={{
            transform: "rotate(45deg) translate(-5%, -50%)",
            background: gradientSecond,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className="absolute top-0 right-0 origin-top-right"
        />
        <div
          style={{
            transform: "rotate(45deg) translate(180%, -70%)",
            background: gradientThird,
            width: `${smallWidth}px`,
            height: `${height}px`,
          }}
          className="absolute top-0 right-0 origin-top-right"
        />
      </motion.div>
    </motion.div>
  );
};

============================================================
FILE: src/components/ui/startText.tsx
============================================================
"use client";

import React, { useRef } from "react";
import { motion, useScroll, useTransform, easeInOut } from "framer-motion";
import { SparklesText } from "./sparkles-text";
import { useTheme } from "next-themes";
import { Particles } from "./particles";

interface ScrollTunnelProps {
  word: string;
  className?: string;
  colors?: {
    text: string;
    background: string;
  };
}

export const ScrollTunnel: React.FC<ScrollTunnelProps> = ({
  word,
  colors,
}) => {
  const containerRef = useRef<HTMLDivElement>(null);

  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start start", "end end"],
  });

  // دمج توقيت التكبير والاختفاء والتوسعة معًا
  const scale = useTransform(scrollYProgress, [0, 0.9], [1, 150], { ease: easeInOut });
  const { theme } = useTheme();

  return (
    <section
      ref={containerRef}
      className="relative overflow-hidden"
      style={{
        backgroundColor: colors?.background,
        minHeight: "200vh",
        // paddingBottom: "10vh",
      }}
    >
      <Particles
        className="absolute inset-0"
        quantity={100}
        ease={40}
        color={theme === "dark" ? "#ffffff" : "#000000"}
        refresh
      />

      <div className="absolute inset-0 pointer-events-none z-0">
      </div>
      {/* الكلمة الكبيرة */}
      <div className="sticky top-0 h-screen flex items-center justify-center pointer-events-none z-10">
        <motion.div
          style={{
            scale,
            transformOrigin: "center center",
          }}
        >
          <h1
            className="text-[15vw] font-black leading-none whitespace-nowrap"
            style={{ color: `${theme === "dark" ? "var(--text-color)" : "#0e0e18"}` }}
            // style={{ color: 'text-[#0e0e18] dark:var(--text-color)' }}
          >
            <SparklesText>
              {word}
            </SparklesText>
            <br />
          </h1>
        </motion.div>
      </div>
    </section>
  );
};

// example use
// <ScrollTunnel word="ABOUT ME">
//     <h1>hi</h1>
// </ScrollTunnel>

============================================================
FILE: src/components/ui/VelocityScroll.tsx
============================================================
"use client";

import {
  motion,
  useAnimationFrame,
  useMotionValue,
  useScroll,
  useSpring,
  useTransform,
  useVelocity,
} from "motion/react";
import React, { useEffect, useRef, useState } from "react";

import { cn } from "@/lib/utils";

interface VelocityScrollProps extends React.HTMLAttributes<HTMLDivElement> {
  defaultVelocity?: number;
  className?: string;
  numRows?: number;
}

interface ParallaxProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode;
  baseVelocity: number;
}

export const wrap = (min: number, max: number, v: number) => {
  const rangeSize = max - min;
  return ((((v - min) % rangeSize) + rangeSize) % rangeSize) + min;
};

function ParallaxText({
  children,
  baseVelocity = 100,
  ...props
}: ParallaxProps) {
  const baseX = useMotionValue(0);
  const { scrollY } = useScroll();
  const scrollVelocity = useVelocity(scrollY);
  const smoothVelocity = useSpring(scrollVelocity, {
    damping: 50,
    stiffness: 400,
  });

  const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {
    clamp: false,
  });

  const [repetitions, setRepetitions] = useState(1);
  const containerRef = useRef<HTMLDivElement>(null);
  const textRef = useRef<HTMLSpanElement>(null);

  useEffect(() => {
    const calculateRepetitions = () => {
      if (containerRef.current && textRef.current) {
        const containerWidth = containerRef.current.offsetWidth;
        const textWidth = textRef.current.offsetWidth;
        const newRepetitions = Math.ceil(containerWidth / textWidth) + 2;
        setRepetitions(newRepetitions);
      }
    };

    calculateRepetitions();

    window.addEventListener("resize", calculateRepetitions);
    return () => window.removeEventListener("resize", calculateRepetitions);
  }, [children]);

  const x = useTransform(baseX, (v) => `${wrap(-100 / repetitions, 0, v)}%`);

  const directionFactor = React.useRef<number>(1);
  useAnimationFrame((t, delta) => {
    let moveBy = directionFactor.current * baseVelocity * (delta / 1000);

    if (velocityFactor.get() < 0) {
      directionFactor.current = -1;
    } else if (velocityFactor.get() > 0) {
      directionFactor.current = 1;
    }

    moveBy += directionFactor.current * moveBy * velocityFactor.get();

    baseX.set(baseX.get() + moveBy);
  });

  return (
    <div
      ref={containerRef}
      className="w-full overflow-hidden whitespace-nowrap bg-transparent"
      {...props}
    >
      <motion.div className="inline-block" style={{ x }}>
        {Array.from({ length: repetitions }).map((_, i) => (
          <span key={i} ref={i === 0 ? textRef : null}>
            {children}{" "}
          </span>
        ))}
      </motion.div>
    </div>
  );
}

export function VelocityScroll({
  defaultVelocity = 5,
  numRows = 2,
  children,
  className,
  ...props
}: VelocityScrollProps) {
  return (
    <div
      className={cn(
        "relative w-full text-4xl font-bold tracking-[-0.02em] md:text-7xl md:leading-[5rem]",
        className,
      )}
      {...props}
    >
      {Array.from({ length: numRows }).map((_, i) => (
        <ParallaxText
          key={i}
          baseVelocity={defaultVelocity * (i % 2 === 0 ? 1 : -1)}
        >
          <span className="text-transparent bg-clip-text bg-gradient-to-b from-gray-400 to-gray-200 ">
            {children}
          </span>
        </ParallaxText>
      ))}
    </div>
  );
}

// example use
// <VelocityScroll>DIGITAL CRAFT</VelocityScroll>
// <VelocityScroll numRows={1}>DIGITAL CRAFT</VelocityScroll>


============================================================
FILE: components.json
============================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

============================================================
FILE: eslint.config.mjs
============================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


============================================================
FILE: package.json
============================================================
{
  "name": "my-portfolio",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@studio-freight/lenis": "^1.0.42",
    "@tsparticles/engine": "^3.8.1",
    "@tsparticles/react": "^3.0.0",
    "@tsparticles/slim": "^3.8.1",
    "@types/canvas-confetti": "^1.9.0",
    "babel-plugin-react-compiler": "^19.0.0-beta-21e868a-20250216",
    "canvas-confetti": "^1.9.3",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.23.12",
    "gsap": "^3.12.7",
    "lenis": "^1.3.4",
    "lodash": "^4.17.21",
    "lucide-react": "^0.475.0",
    "mongoose": "^8.10.1",
    "motion": "^12.4.4",
    "next": "^15.5.2",
    "next-themes": "^0.4.4",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.1.5",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^1.1.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/locomotive-scroll": "^4.1.4",
    "@types/node": "^24.3.1",
    "@types/react": "^19.1.12",
    "@types/react-dom": "^19.0.4",
    "cobe": "^0.6.3",
    "eslint": "^9.20.1",
    "eslint-config-next": "^15.1.7",
    "postcss": "^8.5.2",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.9.2"
  }
}


============================================================
FILE: postcss.config.mjs
============================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;


============================================================
FILE: readme.md
============================================================
# 🔁 Interactive Task Loop with User Feedback

This tool enables an AI-driven workflow where tasks are performed interactively in response to user input. After each task, the user is prompted for the next instruction. The loop continues until the user stops it manually or the maximum number of tool calls is reached.

---

## 🧠 How It Works

1. The AI performs its assigned task.
2. Upon completion, it runs a simple Python script to prompt the user for feedback or a new instruction.
3. Based on the user's input, the AI continues working.
4. The loop stops when:
   - The user manually stops, or
   - The tool call limit is reached.

---

## 📁 Files

### `userinput.py` (placed in the project root)

### `rules.md` ( copy the contents to your rules page)




============================================================
FILE: tsconfig.json
============================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-env.d.ts",
    "build/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}